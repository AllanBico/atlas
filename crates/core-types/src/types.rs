// In crates/core-types/src/types.rs

use rust_decimal::Decimal;
use serde::Deserialize;

/// Represents a single candlestick (Kline).
#[derive(Clone, Debug, Deserialize)]
pub struct Kline {
    /// The start time of this kline, as a Unix timestamp in milliseconds.
    pub open_time: i64,
    /// The opening price.
    pub open: Decimal,
    /// The highest price during this kline.
    pub high: Decimal,
    /// The lowest price during this kline.
    pub low: Decimal,
    /// The closing price.
    pub close: Decimal,
    /// The trading volume in the base asset.
    pub volume: Decimal,
    /// The end time of this kline, as a Unix timestamp in milliseconds.
    pub close_time: i64,
}

/// Represents a trading pair, like "BTCUSDT".
#[derive(Clone, Debug, PartialEq, Eq, Hash, Deserialize)]
pub struct Symbol(pub String);

/// Represents the side of a trade or position.
#[derive(Clone, Copy, Debug, PartialEq, Eq, Deserialize)]
pub enum Side {
    Long,
    Short,
}

/// Represents a trading signal generated by a strategy.
/// This is the primary output of the strategy engine.
#[derive(Clone, Copy, Debug, PartialEq)]
pub enum Signal {
    /// A signal to enter a long position.
    GoLong { confidence: f64 },
    /// A signal to enter a short position.
    GoShort { confidence: f64 },
    /// A signal to hold the current position or stay out of the market.
    Hold,
    /// A signal to close any currently open position for the given symbol.
    Close,
}

/// Represents an active position in the market.
#[derive(Clone, Debug, PartialEq)]
pub struct Position {
    /// The symbol for the position (e.g., "BTCUSDT").
    pub symbol: Symbol,
    /// The side of the position (Long or Short).
    pub side: Side,
    /// The quantity of the asset held.
    pub quantity: Decimal,
    /// The average entry price of the position.
    pub entry_price: Decimal,
    /// The leverage used for this position.
    pub leverage: u8,
}

/// Represents a fully-formed request to place an order on the exchange.
/// This is the primary output of the Risk Management engine.
#[derive(Clone, Debug, PartialEq)]
pub struct OrderRequest {
    /// The symbol for the order (e.g., "BTCUSDT").
    pub symbol: Symbol,
    /// The side of the order (Long or Short).
    pub side: Side,
    /// The quantity of the asset to trade.
    pub quantity: Decimal,
    /// The leverage to use.
    pub leverage: u8,
    
    /// The calculated stop-loss price for this order.
    pub sl_price: Decimal,

    /// The signal that triggered this order, including its confidence.
    /// We carry this forward for logging and analysis.
    pub originating_signal: Signal,
}

/// Represents a completed trade execution.
/// This is the primary output of the Execution engine.
#[derive(Clone, Debug, PartialEq)]
pub struct Execution {
    /// The symbol that was traded.
    pub symbol: Symbol,
    /// The side of the executed trade.
    pub side: Side,
    /// The price at which the trade was executed.
    pub price: Decimal,
    /// The quantity that was executed.
    pub quantity: Decimal,
    /// The total fee paid for this execution.
    pub fee: Decimal,
    /// The order request that led to this execution.
    /// Storing this provides a full audit trail for the trade.
    pub source_request: OrderRequest,
}